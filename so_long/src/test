/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   checks.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 08:33:55 by jschroed          #+#    #+#             */
/*   Updated: 2023/11/30 09:21:14 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

void	check_input(int argc, char **argv, t_game *game)
{
	int	argv_len;

	game->map_alloc = false;
	if (argc > 2)
		error("Too many arguments. (>2)", game);
	if (argc < 2)
		error("No map file provided.", game);
	argv_len = ft_strlen(argv[1]);
	if (!ft_strnstr(&argv[1][argv_len - 4], ".ber", 4))
		error("Invalid map file extention. (!= '.ber')", game);
}

int	error(char *message, t_game *game)
{
	if (game->map_alloc == true)
		free_map(game);
	free(game);
	ft_printf("Error: %s\n", message);
	exit (EXIT_FAILURE);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleanup.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 08:43:05 by jschroed          #+#    #+#             */
/*   Updated: 2023/11/30 08:39:05 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

void	free_map(t_game *game)
{
	int	row;

	row = 0;
	while (row < game->map.rows)
		free(game->map.full[row++]);
	free(game->map.full);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_game.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/10 11:00:27 by jschroed          #+#    #+#             */
/*   Updated: 2023/12/10 14:06:39 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

void init_vars(t_game *game)
{
	game->map.treasures = 0;
	game->map.exit = 0;
	game->map.players = 0;
	game->movements = 0;
	game->map.columns = ft_strlen(game->map.full[0]) - 1;
	game->player_sprite = RIGHT;
}

void init_mlx(t_game *game)
{
	game->mlx_ptr = mlx_init();
	if (game->mlx_ptr == NULL)
	{
		free(game->mlx_ptr);
		error("No mlx pointer found.", game);
	}
	game->win_ptr = mlx_new_window(\
			game->mlx_ptr, \
			game->map.columns * IMG_WIDTH, \
			game->map.rows * IMG_HEIGHT, \
			"so_long");
	if (game->win_ptr == NULL)
	{
		free(game->mlx_ptr);
		error("Error creating window.", game);
	}
}

void init_sprites(t_game *game)
{
	void *mlx;

	mlx = game->mlx_ptr;
	game->wall = load_sprite(mlx, WALL_XPM, game);
	game->floor = load_sprite(mlx, FLOOR_XPM, game);
	game->treasures = load_sprite(mlx, TREASURE_XPM, game);
	game->player_front = load_sprite(mlx, PLAYER_FRONT_XPM, game);
	game->player_back = load_sprite(mlx, PLAYER_BACK_XPM, game);
	game->player_left = load_sprite(mlx, PLAYER_LEFT_XPM, game);
	game->player_right = load_sprite(mlx, PLAYER_RIGHT_XPM, game);
	game->exit_opened = load_sprite(mlx, EXIT_OPENED_XPM, game);
	game->exit_closed = load_sprite(mlx, EXIT_CLOSED_XPM, game);
}

t_image load_sprite(void *mlx, char *path, t_game *game)
{
	t_image sprite;

	sprite.xpm_ptr = mlx_xpm_file_to_image(mlx, path, &sprite.x, &sprite.y);
	if (sprite.xpm_ptr == NULL)
		error("Error loading sprite.", game);
	return (sprite);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_map.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/30 09:29:54 by jschroed          #+#    #+#             */
/*   Updated: 2023/12/10 10:44:52 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

void	init_map(t_game *game, char *argv)
{
	char	*map_temp;
	char	*line_temp;
	int		map_fd;
	
	map_fd = open(argv, O_RDONLY);
	if (map_fd == -1)
		error("Map file could not be opened or found.", game);
	map_temp = ft_strdup("");
	game->map.rows = 0;
	while (true)
	{
		line_temp = get_next_line(map_fd);
		if (line_temp == NULL)
			break ;
		map_temp = ft_strappend(&map_temp, line_temp);
		free(line_temp);
		game->map.rows++;
	}
	close(map_fd);
	//TODO: implement this function.
	/* check_empty_lines(map_temp, game); */
	game->map.full = ft_split(map_temp, '\n');
	game->map_alloc = true;
	free(map_temp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   render_map.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/10 12:02:20 by jschroed          #+#    #+#             */
/*   Updated: 2023/12/10 14:00:45 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

int render_map(t_game *game)
{
	int x;
	int y;

	y = 0;
	while (y < game->map.rows)
	{
		x = 0;
		while (x < game->map.columns)
		{
			render_map_sprite(game, y, x);
			x++;
		}
		y++;
	}
	print_movements(game);
	return (0);
}

void render_map_sprite(t_game *game, int y, int x)
{
	char param;

	param = game->map.full[y][x];
	if (param == WALL)
		render_sprite(game, game->wall, y, x);
	else if (param == FLOOR)
		render_sprite(game, game->floor, y, x);
	else if (param == TREASURE)
		render_sprite(game, game->treasures, y, x);
	else if (param == MAP_EXIT)
	{
		if (game->map.treasures == 0)
			render_sprite(game, game->exit_closed, y, x);
		else 
			render_sprite(game, game->exit_opened, y, x);
	}
	else if (param == PLAYER)
		render_player(game, x, y);
}

void render_sprite(t_game *game, t_image sprite, int line, int column)
{
	mlx_put_image_to_window(\
			game->mlx_ptr,\
			game->win_ptr,\
			sprite.xpm_ptr,\
			column * sprite.x,\
			line * sprite.y\
			);
}

void render_player(t_game *game, int y, int x)
{
	if (game->player_sprite == FRONT)
		render_sprite(game, game->player_front, y, x);
	else if (game->player_sprite == BACK)
		render_sprite(game, game->player_back, y, x);
	else if (game->player_sprite == LEFT)
		render_sprite(game, game->player_left, y, x);
	else if (game->player_sprite == RIGHT)
		render_sprite(game, game->player_right, y, x);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   so_long.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 07:46:44 by jschroed          #+#    #+#             */
/*   Updated: 2023/12/10 14:30:19 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"

int	main(int argc, char **argv)
{
	t_game *game;

	game = malloc(sizeof(t_game));
	//TODO: check if malloc check needed
	check_input(argc, argv, game);
	init_map(game, argv[1]);
	init_vars(game);
	/* check_map(game); */
	init_mlx(game);
	init_sprites(game);
	render_map(game);
	// three cases: classic game control, quit and draw screen
	/* mlx_hook(game->win_ptr, KeyPress, KeyPressMask, handle_input, game); */
	/* mlx_hook(game->win_ptr, DestroyNotify, ButtonPressMask, quit_game, game); */
	mlx_hook(game->win_ptr, Expose, ExposureMask, render_map, game);
	// wait for input
	mlx_loop(game->mlx_ptr);
	/* cleanup(game); */
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jschroed <jschroed@student.42berlin.de>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/12/08 08:30:32 by jschroed          #+#    #+#             */
/*   Updated: 2023/12/10 14:04:38 by jschroed         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/so_long.h"
#include <mlx.h>

char	*ft_strappend(char **s1, const char *s2)
{
	char *str;
	size_t	len1;
	size_t	len2;
	
	len1 = ft_strlen(*s1);
	len2 = ft_strlen(s2);
	if (!*s1 || !s2)
		return (NULL);
	str = (char *)ft_calloc((len1 + len2) + 1, sizeof(char));
	if (!str)
		return (NULL);
	ft_strlcpy(str, *s1, ft_strlen(*s1) + 1);
	ft_strlcat(str, s2, ft_strlen(*s1) + ft_strlen(s2) + 1);
	free(*s1);
	return (str);
}

void print_movements(t_game *game)
{
	char *movements;
	char *text;

	movements = ft_itoa(game->movements);
	text = ft_strjoin("Movements: ", movements);
	mlx_string_put(game->mlx_ptr, game->win_ptr, 40, 20, 99999, text);
	free(movements);
	free(text);
}
